// Enhanced Form Validation
// Provides real-time validation, better error states, and improved user experience

class FormValidator {
    constructor(formSelector) {
        this.form = document.querySelector(formSelector);
        this.fields = [];
        this.validationRules = {};
        this.isInitialized = false;
        
        if (this.form) {
            this.init();
        } else {
            console.warn(`Form not found: ${formSelector}`);
        }
    }
    
    init() {
        try {
            this.setupValidationRules();
            this.findFormFields();
            this.setupEventListeners();
            this.createValidationUI();
            
            console.log('✅ Form validator initialized');
            this.isInitialized = true;
        } catch (error) {
            console.error('❌ Failed to initialize form validator:', error);
        }
    }
    
    setupValidationRules() {
        this.validationRules = {
            name: [
                { 
                    rule: 'required', 
                    message: 'Tên là bắt buộc' 
                },
                { 
                    rule: 'minLength', 
                    value: 2, 
                    message: 'Tên phải có ít nhất 2 ký tự' 
                },\n                { \n                    rule: 'maxLength', \n                    value: 50, \n                    message: 'Tên không được quá 50 ký tự' \n                },\n                { \n                    rule: 'pattern', \n                    value: /^[a-zA-ZàáảãạâấầẩẫậăắằẳẵặèéẻẽẹêếềểễệìíỉĩịòóỏõọôốồổỗộơớờởỡợùúủũụưứừửữựỳýỷỹỵđĐ\\s]+$/,\n                    message: 'Tên chỉ được chứa chữ cái và khoảng trắng'\n                }\n            ],\n            email: [\n                { \n                    rule: 'required', \n                    message: 'Email là bắt buộc' \n                },\n                { \n                    rule: 'email', \n                    message: 'Địa chỉ email không hợp lệ' \n                },\n                { \n                    rule: 'maxLength', \n                    value: 254, \n                    message: 'Email không được quá 254 ký tự' \n                }\n            ],\n            subject: [\n                { \n                    rule: 'required', \n                    message: 'Chủ đề là bắt buộc' \n                },\n                { \n                    rule: 'minLength', \n                    value: 5, \n                    message: 'Chủ đề phải có ít nhất 5 ký tự' \n                },\n                { \n                    rule: 'maxLength', \n                    value: 100, \n                    message: 'Chủ đề không được quá 100 ký tự' \n                }\n            ],\n            message: [\n                { \n                    rule: 'required', \n                    message: 'Tin nhắn là bắt buộc' \n                },\n                { \n                    rule: 'minLength', \n                    value: 10, \n                    message: 'Tin nhắn phải có ít nhất 10 ký tự' \n                },\n                { \n                    rule: 'maxLength', \n                    value: 1000, \n                    message: 'Tin nhắn không được quá 1000 ký tự' \n                }\n            ]\n        };\n    }\n    \n    findFormFields() {\n        this.fields = Array.from(this.form.querySelectorAll('input, textarea, select')).filter(field => {\n            return field.type !== 'submit' && field.type !== 'button' && field.type !== 'hidden';\n        });\n        \n        console.log(`Found ${this.fields.length} form fields`);\n    }\n    \n    setupEventListeners() {\n        // Real-time validation on input\n        this.fields.forEach(field => {\n            // Validate on blur (when field loses focus)\n            field.addEventListener('blur', (e) => {\n                this.validateField(field);\n            });\n            \n            // Real-time validation on input (with debounce)\n            let timeout;\n            field.addEventListener('input', (e) => {\n                clearTimeout(timeout);\n                timeout = setTimeout(() => {\n                    this.validateField(field, true); // Silent validation\n                }, 300);\n            });\n            \n            // Character count for text areas and long inputs\n            if (field.tagName === 'TEXTAREA' || (field.type === 'text' && this.hasMaxLength(field))) {\n                field.addEventListener('input', () => {\n                    this.updateCharacterCount(field);\n                });\n            }\n        });\n        \n        // Form submission validation\n        this.form.addEventListener('submit', (e) => {\n            if (!this.validateForm()) {\n                e.preventDefault();\n                this.showFormError('Vui lòng sửa các lỗi trong form trước khi gửi');\n                this.focusFirstError();\n            }\n        });\n    }\n    \n    createValidationUI() {\n        this.fields.forEach(field => {\n            const container = field.closest('.form-group, .mb-6, .mb-4') || field.parentElement;\n            \n            // Create feedback element if it doesn't exist\n            let feedback = container.querySelector('.form-feedback');\n            if (!feedback) {\n                feedback = document.createElement('div');\n                feedback.className = 'form-feedback mt-2 text-sm transition-all duration-300 opacity-0';\n                feedback.setAttribute('data-field', field.id);\n                container.appendChild(feedback);\n            }\n            \n            // Create character count for fields with max length\n            if (this.hasMaxLength(field)) {\n                let charCount = container.querySelector('.char-count');\n                if (!charCount) {\n                    charCount = document.createElement('div');\n                    charCount.className = 'char-count text-xs text-gray-500 dark:text-gray-400 mt-1 text-right';\n                    container.appendChild(charCount);\n                }\n                this.updateCharacterCount(field);\n            }\n            \n            // Add validation icons container\n            let iconContainer = field.nextElementSibling;\n            if (!iconContainer || !iconContainer.classList.contains('validation-icon')) {\n                iconContainer = document.createElement('div');\n                iconContainer.className = 'validation-icon absolute right-3 top-1/2 transform -translate-y-1/2 transition-all duration-300 opacity-0';\n                field.parentElement.style.position = 'relative';\n                field.parentElement.appendChild(iconContainer);\n            }\n        });\n    }\n    \n    validateField(field, silent = false) {\n        const fieldName = field.id || field.name;\n        const rules = this.validationRules[fieldName] || [];\n        const value = field.value.trim();\n        \n        let isValid = true;\n        let errorMessage = '';\n        \n        // Check each validation rule\n        for (const ruleObj of rules) {\n            const validation = this.applyValidationRule(value, ruleObj);\n            if (!validation.isValid) {\n                isValid = false;\n                errorMessage = validation.message;\n                break; // Stop at first error\n            }\n        }\n        \n        // Update UI only if not silent\n        if (!silent) {\n            this.updateFieldUI(field, isValid, errorMessage);\n        }\n        \n        return isValid;\n    }\n    \n    applyValidationRule(value, ruleObj) {\n        const { rule, value: ruleValue, message } = ruleObj;\n        \n        switch (rule) {\n            case 'required':\n                return {\n                    isValid: value.length > 0,\n                    message: message\n                };\n                \n            case 'email':\n                const emailRegex = /^[a-zA-Z0-9.!#$%&'*+/=?^_`{|}~-]+@[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?(?:\\.[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?)*$/;\n                return {\n                    isValid: value === '' || emailRegex.test(value),\n                    message: message\n                };\n                \n            case 'minLength':\n                return {\n                    isValid: value.length >= ruleValue,\n                    message: message\n                };\n                \n            case 'maxLength':\n                return {\n                    isValid: value.length <= ruleValue,\n                    message: message\n                };\n                \n            case 'pattern':\n                return {\n                    isValid: value === '' || ruleValue.test(value),\n                    message: message\n                };\n                \n            default:\n                return { isValid: true, message: '' };\n        }\n    }\n    \n    updateFieldUI(field, isValid, errorMessage) {\n        const container = field.closest('.form-group, .mb-6, .mb-4') || field.parentElement;\n        const feedback = container.querySelector('.form-feedback');\n        const icon = container.querySelector('.validation-icon');\n        \n        // Remove previous states\n        field.classList.remove('border-red-500', 'border-green-500', 'dark:border-red-400', 'dark:border-green-400');\n        field.classList.remove('ring-red-500', 'ring-green-500', 'dark:ring-red-400', 'dark:ring-green-400');\n        \n        if (field.value.trim() === '') {\n            // Neutral state for empty fields\n            feedback.classList.remove('text-red-500', 'text-green-500', 'opacity-100');\n            feedback.classList.add('opacity-0');\n            icon.classList.add('opacity-0');\n            return true;\n        }\n        \n        if (isValid) {\n            // Success state\n            field.classList.add('border-green-500', 'dark:border-green-400');\n            feedback.textContent = '✓ Hợp lệ';\n            feedback.className = 'form-feedback mt-2 text-sm transition-all duration-300 opacity-100 text-green-500 dark:text-green-400';\n            \n            icon.innerHTML = '<i class=\"fas fa-check text-green-500 dark:text-green-400\"></i>';\n            icon.classList.remove('opacity-0');\n            icon.classList.add('opacity-100');\n        } else {\n            // Error state\n            field.classList.add('border-red-500', 'dark:border-red-400');\n            feedback.textContent = errorMessage;\n            feedback.className = 'form-feedback mt-2 text-sm transition-all duration-300 opacity-100 text-red-500 dark:text-red-400';\n            \n            icon.innerHTML = '<i class=\"fas fa-exclamation-circle text-red-500 dark:text-red-400\"></i>';\n            icon.classList.remove('opacity-0');\n            icon.classList.add('opacity-100');\n            \n            // Add shake animation\n            field.classList.add('shake');\n            setTimeout(() => field.classList.remove('shake'), 500);\n        }\n        \n        return isValid;\n    }\n    \n    updateCharacterCount(field) {\n        const container = field.closest('.form-group, .mb-6, .mb-4') || field.parentElement;\n        const charCount = container.querySelector('.char-count');\n        const maxLength = this.getMaxLength(field);\n        \n        if (charCount && maxLength) {\n            const currentLength = field.value.length;\n            const remaining = maxLength - currentLength;\n            \n            charCount.textContent = `${currentLength}/${maxLength}`;\n            \n            if (remaining < 10) {\n                charCount.classList.add('text-red-500', 'dark:text-red-400');\n                charCount.classList.remove('text-gray-500', 'dark:text-gray-400');\n            } else {\n                charCount.classList.remove('text-red-500', 'dark:text-red-400');\n                charCount.classList.add('text-gray-500', 'dark:text-gray-400');\n            }\n        }\n    }\n    \n    validateForm() {\n        let isFormValid = true;\n        \n        this.fields.forEach(field => {\n            const fieldValid = this.validateField(field);\n            if (!fieldValid) {\n                isFormValid = false;\n            }\n        });\n        \n        return isFormValid;\n    }\n    \n    focusFirstError() {\n        const firstErrorField = this.form.querySelector('.border-red-500');\n        if (firstErrorField) {\n            firstErrorField.focus();\n            firstErrorField.scrollIntoView({ behavior: 'smooth', block: 'center' });\n        }\n    }\n    \n    showFormError(message) {\n        // Remove existing form error\n        const existingError = this.form.querySelector('.form-error');\n        if (existingError) {\n            existingError.remove();\n        }\n        \n        // Create form error element\n        const errorElement = document.createElement('div');\n        errorElement.className = 'form-error bg-red-100 dark:bg-red-900/20 border border-red-300 dark:border-red-700 text-red-700 dark:text-red-300 px-4 py-3 rounded-lg mb-4 animate-fadeIn';\n        errorElement.innerHTML = `\n            <div class=\"flex items-center\">\n                <i class=\"fas fa-exclamation-triangle mr-2\"></i>\n                <span>${message}</span>\n            </div>\n        `;\n        \n        this.form.insertBefore(errorElement, this.form.firstElementChild);\n        \n        // Auto remove after 5 seconds\n        setTimeout(() => {\n            if (errorElement.parentNode) {\n                errorElement.remove();\n            }\n        }, 5000);\n    }\n    \n    resetValidation() {\n        this.fields.forEach(field => {\n            field.classList.remove('border-red-500', 'border-green-500', 'dark:border-red-400', 'dark:border-green-400');\n            \n            const container = field.closest('.form-group, .mb-6, .mb-4') || field.parentElement;\n            const feedback = container.querySelector('.form-feedback');\n            const icon = container.querySelector('.validation-icon');\n            \n            if (feedback) {\n                feedback.classList.remove('opacity-100', 'text-red-500', 'text-green-500');\n                feedback.classList.add('opacity-0');\n            }\n            \n            if (icon) {\n                icon.classList.add('opacity-0');\n            }\n        });\n        \n        // Remove form errors\n        const formErrors = this.form.querySelectorAll('.form-error');\n        formErrors.forEach(error => error.remove());\n    }\n    \n    // Helper methods\n    hasMaxLength(field) {\n        const fieldName = field.id || field.name;\n        const rules = this.validationRules[fieldName] || [];\n        return rules.some(rule => rule.rule === 'maxLength');\n    }\n    \n    getMaxLength(field) {\n        const fieldName = field.id || field.name;\n        const rules = this.validationRules[fieldName] || [];\n        const maxLengthRule = rules.find(rule => rule.rule === 'maxLength');\n        return maxLengthRule ? maxLengthRule.value : null;\n    }\n    \n    // Public methods\n    isValid() {\n        return this.validateForm();\n    }\n    \n    reset() {\n        this.form.reset();\n        this.resetValidation();\n    }\n    \n    addValidationRule(fieldName, rule) {\n        if (!this.validationRules[fieldName]) {\n            this.validationRules[fieldName] = [];\n        }\n        this.validationRules[fieldName].push(rule);\n    }\n    \n    removeValidationRule(fieldName, ruleName) {\n        if (this.validationRules[fieldName]) {\n            this.validationRules[fieldName] = this.validationRules[fieldName].filter(rule => rule.rule !== ruleName);\n        }\n    }\n}\n\n// Add CSS for validation styles\nconst addValidationStyles = () => {\n    const styles = `\n        /* Form validation animations */\n        @keyframes shake {\n            0%, 100% { transform: translateX(0); }\n            25% { transform: translateX(-5px); }\n            75% { transform: translateX(5px); }\n        }\n        \n        @keyframes fadeIn {\n            from { opacity: 0; transform: translateY(-10px); }\n            to { opacity: 1; transform: translateY(0); }\n        }\n        \n        .shake {\n            animation: shake 0.5s ease-in-out;\n        }\n        \n        .animate-fadeIn {\n            animation: fadeIn 0.3s ease-out;\n        }\n        \n        /* Enhanced form field styles */\n        .form-feedback {\n            display: flex;\n            align-items: center;\n            font-weight: 500;\n        }\n        \n        .validation-icon {\n            pointer-events: none;\n        }\n        \n        /* Character count styling */\n        .char-count {\n            font-variant-numeric: tabular-nums;\n        }\n        \n        /* Form error styling */\n        .form-error {\n            box-shadow: 0 2px 4px rgba(239, 68, 68, 0.1);\n        }\n        \n        /* Enhanced input focus states */\n        input:focus.border-red-500,\n        textarea:focus.border-red-500 {\n            ring-color: rgb(239 68 68 / 0.5);\n            ring-width: 2px;\n        }\n        \n        input:focus.border-green-500,\n        textarea:focus.border-green-500 {\n            ring-color: rgb(34 197 94 / 0.5);\n            ring-width: 2px;\n        }\n        \n        /* Accessibility improvements */\n        @media (prefers-reduced-motion: reduce) {\n            .shake,\n            .animate-fadeIn {\n                animation: none !important;\n            }\n        }\n    `;\n    \n    const styleSheet = document.createElement('style');\n    styleSheet.textContent = styles;\n    document.head.appendChild(styleSheet);\n};\n\n// Initialize form validator when DOM is ready\nlet contactFormValidator;\ndocument.addEventListener('DOMContentLoaded', () => {\n    try {\n        addValidationStyles();\n        contactFormValidator = new FormValidator('#contact-form');\n    } catch (error) {\n        console.error('❌ Failed to initialize form validator:', error);\n    }\n});\n\n// Export for use in other modules\nif (typeof window !== 'undefined') {\n    window.FormValidator = FormValidator;\n    window.contactFormValidator = contactFormValidator;\n}"